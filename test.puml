@startuml
class main.Main {
+ {static} void main(String[])
}
enum base.loader.FileNameFormatter {
+  TEXT
+  IMAGE
- String fileType
+ String type()
+ {static} String of(String,FileNameFormatter)
}
enum Game.gameConstant.PlayerState {
+  IDLE
+  MOVING
+  JUMP
+  ATTACKING
+  HIT
+ int num
+ int getAnimationFrameNumbs()
}
class com.company.Main {
+ {static} void main(String[])
}
class Game.DataPass {
}
interface Game.PLUG.GameCalculatorLambda {
+ int calculate(int)
}
class main.Game {
- GameWindow gameWindow
- GamePanel gamePanel
- TranslatorTester translator
- Thread gameThread
- {static} double FPS
- {static} double UPS
- MouseInputs mouseInputs
- KeyboardInputs keyboardInputs
- {static} Logger LOGGER
- void initClasses()
- void gamePanelSetting()
+ void runGame()
+ void run()
+ TranslatorTester getTranslator()
+ void render(Graphics)
}
class logic.input.KeyboardInputs {
- Game game
- Direction keyEventToMoveCommand(KeyEvent)
- void updatePlayerMoveState(Direction,boolean)
+ void keyTyped(KeyEvent)
+ void keyPressed(KeyEvent)
+ void keyReleased(KeyEvent)
}
enum logic.input.Direction {
+  UP
+  DOWN
+  LEFT
+  RIGHT
+  NONE
~ String cmd
+ boolean isMoving()
+ int index()
}
class Game.GameElementFactory {
+ GameCharacter gameCharacterFactory()
}
class logic.input.MouseInputs {
- Game game
+ void mouseDragged(MouseEvent)
+ void mouseMoved(MouseEvent)
+ void mouseClicked(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseReleased(MouseEvent)
+ void mouseEntered(MouseEvent)
+ void mouseExited(MouseEvent)
}
enum Game.gameBase.GameCalculator {
+  ADD
+  SUB
+  MUL
+  DIV
+ {static} GameUnitPair calculate(int,int,GameCalculator,int)
+ {static} GameUnitPair calculate(int,int,GameCalculatorLambda)
}
class Game.Loader.ImageNamePath {
+ {static} String PLAYER_MAIN_CHARACTER
+ {static} String imagePath(String,String)
}
class Game.gameBase.GamePoint {
+ void addToX(float)
+ boolean equals(Object)
+ String toString()
+ {static} double distance(GameUnitPair,GameUnitPair)
+ {static} GamePoint add(GameUnitPair,GameUnitPair)
+ {static} GamePoint sub(GameUnitPair,GameUnitPair)
+ {static} GamePoint mul(GameUnitPair,GameUnitPair)
+ {static} double dot(GameUnitPair,GameUnitPair)
}
abstract class Game.ABC.BasicMoveABC {
# PlayerState playerAction
# boolean attacking
# GamePoint point
# float playerSpeed
# Direction direction
# int[] dirMove
+ {abstract}void updatePosition()
+ void setX(float)
+ void setY(float)
+ void setXY(float,float)
# void setPlayerSpeed(float)
+ void setAttacking(boolean)
+ void setPlayerState(PlayerState)
+ void setDirection(Direction,boolean)
}
class Game.Loader.ImageLoader {
+ {static} BufferedImage loadImage(String,String)
+ {static} BufferedImage[][] loadCharacter(String,int,int)
}
class GUI.Test.TranslatorTester {
- {static} Logger LOGGER
- GameCharacter player
+ void updateLogic()
+ GameCharacter getPlayer()
+ void setPlayMove(Direction,boolean)
+ void render(Graphics)
}
class main.GamePanel {
- Game game
+ void paintComponent(Graphics)
}
class GUI.Translator {
+ void render(Graphics)
}
abstract class Game.ABC.GameCharacterABC {
# BufferedImage[][] animations
# int aniTick
# int imgScaleX
+ void setAniThing(AniData)
+ void setImageScale(ImageScaleData)
+ void setGamePlayerSpeedData(GamePlayerSpeedData)
+ void setAnimation(BufferedImage[][])
+ BufferedImage getAnimationImage(PlayerState,int)
- int scaleFunction(int)
+ GameUnitPair getImageScalePoint(BufferedImage)
}
class Game.gameBase.GameUnitPair {
+ float x
+ {static} GameUnitPair buildGameUnitPair(int,int)
+ {static} GameUnitPair buildGameUnitPair(float,float)
+ {static} GameUnitPair buildGameUnitPair(Point)
+ GameUnitPair getPoint()
+ Point toIntPoint()
+ void setAll(float,float)
+ GameUnitPair getSizePoint()
+ void copy(GameUnitPair)
+ void copy(Point)
+ GameUnitPair add(float)
+ GameUnitPair sub(float)
+ GameUnitPair mul(float)
+ GameUnitPair div(float)
}
interface Game.PLUG.GameLambda {
+ T func(T,T)
}
class Game.builder.GameCharacterBuilder {
- GameCharacter gameCharacter
+ GameCharacterBuilder setAniData(AniData)
+ GameCharacterBuilder setImageScale(ImageScaleData)
+ GameCharacterBuilder setGamePlayerSpeedData(GamePlayerSpeedData)
+ GameCharacter build()
}
class main.Translator {
}
class Game.Loader.GameElementLoader {
+ GameCharacter gameCharacter()
+ {static} GameCharacter getTestingGameCharacter()
}
class main.GameWindow {
+ void init(GamePanel)
}
interface Game.PLUG.GameRenderInterface {
+ void render(Graphics)
}
class Game.GameCharacter {
- {static} Logger LOGGER
+ void init(float,float)
+ void updatePosition()
+ void render(Graphics)
+ void setAnimationImage()
+ void setAnimationState()
+ void updateAnimationTick()
+ void update()
}
interface Game.PLUG.GameCharacterInterface {
+ void setAnimationImage()
+ void setAnimationState()
+ void updateAnimationTick()
}
class base.loader.BaseLoader {
+ {static} InputStream loadFile(Object,String)
+ {static} InputStream loadFile(Class<T>,String)
+ {static} BufferedImage convertToImage(InputStream)
+ {static} BufferedImage loadImage(Class<T>,String)
+ {static} URI getURI(Class<T>,String)
+ {static} List<String> loadTextFile(Class<T>,String)
}
class base.BaseGameConstant {
+ {static} int TILES_DEFAULT_SIZE
+ {static} float SCALE
+ {static} int TILES_IN_WIDTH
+ {static} int TILES_IN_HEIGHT
+ {static} int TILES_SIZE
+ {static} int GAME_WIDTH
+ {static} int GAME_HEIGHT
}


main.Runnable <|.. main.Game
Game.PLUG.GameRenderInterface <|.. main.Game
base.BaseGameConstant <|-- main.Game
java.awt.event.KeyListener <|.. logic.input.KeyboardInputs
java.awt.event.MouseListener <|.. logic.input.MouseInputs
java.awt.event.MouseMotionListener <|.. logic.input.MouseInputs
Game.gameBase.GameUnitPair <|-- Game.gameBase.GamePoint
Game.PLUG.GameRenderInterface <|.. GUI.Test.TranslatorTester
javax.swing.JPanel <|-- main.GamePanel
Game.PLUG.GameRenderInterface <|.. GUI.Translator
Game.ABC.BasicMoveABC <|-- Game.ABC.GameCharacterABC
javax.swing.JFrame <|-- main.GameWindow
Game.PLUG.GameCharacterInterface <|.. Game.GameCharacter
Game.PLUG.GameRenderInterface <|.. Game.GameCharacter
Game.ABC.GameCharacterABC <|-- Game.GameCharacter
@enduml